#   Copyright (C) 2000, 2007, 2009, 2010 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GCC; see the file COPYING3.  If not see
# <http://www.gnu.org/licenses/>.

# Test using the DMD testsuite.
# Load support procs.
load_lib gdc-dg.exp

# Convert DMD arguments to GDC equivalent
proc gdc-convert-args { args } {
    set out ""

    foreach arg [split [lindex $args 0] " "] {
        # List of switches kept in ASCII collated order.
        if [string match "-allinst" $arg] {
            lappend out "-femit-templates"

        } elseif { [string match "-boundscheck" $arg]
                 || [ string match "-boundscheck=on" $arg] } {
            lappend out "-fbounds-check"

        } elseif { [string match "-boundscheck=off" $arg]
                   || [string match "-noboundscheck" $arg] } {
            lappend out "-fno-bounds-check"

        } elseif [string match "-boundscheck=safeonly" $arg] {
            lappend out "-fbounds-check=safeonly"

        } elseif [string match "-c" $arg] {
            lappend out "-c"

        } elseif [string match "-d" $arg] {
            lappend out "-Wno-deprecated"

        } elseif [string match "-de" $arg] {
            lappend out "-Wdeprecated"
            lappend out "-Werror"

        } elseif [string match "-debug" $arg] {
            lappend out "-fdebug"

        } elseif [string match "-dw" $arg] {
            lappend out "-Wdeprecated"
            lappend out "-Wno-error"

        } elseif [string match "-fPIC" $arg] {
            lappend out "-fPIC"

        } elseif { [string match "-g" $arg]
                   || [string match "-gc" $arg] } {
            lappend out "-g"

        } elseif [string match "-inline" $arg] {
            lappend out "-finline-functions"

        } elseif [string match "-O" $arg] {
            lappend out "-O2"

        } elseif [string match "-property" $arg] {
            lappend out "-fproperty"

        } elseif [string match "-release" $arg] {
            lappend out "-frelease"

        } elseif [string match "-transition=import" $arg] {
            lappend out "-ftransition=import"

        } elseif [string match "-unittest" $arg] {
            lappend out "-funittest"

        } elseif [regexp -- {^-verrors=(\d+)} $arg pattern num] {
            lappend out "-fmax-errors=$num"

        } elseif [string match "-w" $arg] {
            lappend out "-Wall"
            lappend out "-Werror"

        } elseif [string match "-wi" $arg] {
            lappend out "-Wall"
            lappend out "-Wno-error"

        } else {
            # print "Unhandled Argument: $arg"
        }
    }

    set i 0
    while { [regexp -start $i -indices -- {-I([\w/-]+)} $args i j] } {
        set i [lindex $j 0]
        set j [lindex $j 1]
        lappend out "-I[string range $args $i $j]"
    }

    set i 0
    while { [regexp -start $i -indices -- {-J([\w/-]+)} $args i j] } {
        set i [lindex $j 0]
        set j [lindex $j 1]
        lappend out "-J[string range $args $i $j]"
    }

    set i 0
    while { [regexp -start $i -indices -- {-version=([\w]+)} $args i j] } {
        set i [lindex $j 0]
        set j [lindex $j 1]
        lappend out "-fversion=[string range $args $i $j]"
    }

    return $out
}

proc gdc-copy-extra { base extra } {
    # Split base, folder/file.
    set type [file dirname $extra ]

    # print "Filename: $base - $extra"

    set fdin [open $base/$extra r]
    fconfigure $fdin -encoding binary

    file mkdir [file dirname $extra ]
    set fdout [ open $extra w]
    fconfigure $fdout -encoding binary

    # print "[file dirname $test ]"
    while { [gets $fdin copy_line] >= 0 } {
        set out_line $copy_line
        puts $fdout $out_line
    }

    close $fdin
    close $fdout

    return $extra
}


# Translate DMD test directives to dejagnu equivalent.
proc dmd2dg { base test } {
    global DEFAULT_DFLAGS
    global PERMUTE_ARGS
    global EXECUTE_ARGS

    set PERMUTE_ARGS $DEFAULT_DFLAGS
    set EXECUTE_ARGS ""

    # Split base, folder/file.
    set type [file dirname $test]

    # print "Filename: $base - $test"

    set fdin [open $base/$test r]
    #fconfigure $fdin -encoding binary

    file mkdir [file dirname $test]
    set fdout [ open $test w]
    #fconfigure $fdout -encoding binary

    # print "[file dirname $test ]"

    # Add specific options for test type

    # DMD's testsuite is exteremly verbose.
    #  dg-prune-ouput generates pass.
    set out_line "// { dg-prune-output .* }"
    puts $fdout $out_line

    # Since GCC 6-20160131 blank lines are not allowed in the
    # output by default.
    dg-allow-blank-lines-in-output { 1 }

    # Compilable files are successful if an output is generated.
    # Fail compilable are successful if an output is not generated.
    # Runnable must compile, link, and return 0 to be successful by default.
    switch [ file dirname $test ] {
        compilable {
            set out_line "// { dg-final { output-exists } }"
            puts $fdout $out_line
        }

        fail_compilation {
            set out_line "// { dg-final { output-exists-not } }"
            puts $fdout $out_line
        }

    }

    while { [gets $fdin copy_line] >= 0 } {
        set out_line $copy_line

        # PERMUTE_ARGS.  Must be handled separately
        if [regexp -- {PERMUTE_ARGS\s*:\s*(.*)} $copy_line match args] {
            set PERMUTE_ARGS [gdc-convert-args $args]
            continue
        }

        # COMPILE_SEPARATELY. Not handled.
        if [regexp -- {COMPILE_SEPARATELY} $copy_line] {
            continue
        }

        # POST_SCRIPT. not handled
        if [regexp -- {POST_SCRIPT} $copy_line] {
            continue
        }

        # Can be handled with dg directives.

        # Handle EXECUTE_ARGS option.
        if [regexp -- {EXECUTE_ARGS\s*:\s*(.*)} $copy_line match args] {
            foreach arg $args {
                lappend EXECUTE_ARGS $arg
            }
            continue
        }

        # Handle EXTRA_SOURCES option
        if [regexp -- {EXTRA_SOURCES\s*:\s*(.*)} $copy_line match sources] {
            # Iterate imports and convert
            foreach import $sources {
                # print "Import: $base $type/$import"
                gdc-copy-extra $base "$type/$import"
            }
            set out_line "// { dg-additional-sources \"$sources\" }"
        }

        # Handle EXTRA_CPP_SOURCES option
        if [regexp -- {EXTRA_CPP_SOURCES\s*:\s*(.*)} $copy_line match sources] {
            # Iterate imports and convert
            foreach import $sources {
                # print "Import: $base $type/$import"
                gdc-copy-extra $base "$type/$import"
            }
            set out_line "// { dg-additional-sources \"$sources\" }"
        }

        # Handle EXTRA_FILES option
        if [regexp -- {EXTRA_FILES\s*:\s*(.*)} $copy_line match files] {
            # Iterate imports and convert
            foreach import $files {
                # print "Import: $base $type/$import"
                gdc-copy-extra $base "$type/$import"
            }
            set out_line "// { dg-additional-files \"$files\" }"
        }

        # REQUIRED_ARGS.
        if [regexp -- {REQUIRED_ARGS\s*:\s*(.*)} $copy_line match args] {
            set out_line "// { dg-additional-options \"[gdc-convert-args $args]\" }"
        }
        puts $fdout $out_line
    }

    close $fdin
    close $fdout

    return $test
}

proc gdc-permute-options { options } {
    set result { }
    set n [expr 1<<[llength $options]]
    for { set i 0 } { $i<$n } { incr i } {
        set option ""
        for { set j 0 } { $j<[llength $options] } { incr j } {
            if [expr $i & 1 << $j] {
                append option [lindex $options $j]
                append option " "
            }
        }
        lappend result $option

    }
    return $result
}


proc gdc-do-test { } {
    global TORTURE_OPTIONS
    global SHARED_OPTION
    global srcdir subdir
    global dg-do-what-default
    global verbose

    # If a testcase doesn't have special options, use these.
    global DEFAULT_DFLAGS
    if ![info exists DEFAULT_DFLAGS] then {
        set DEFAULT_DFLAGS "-g -O2 -frelease"
        #set DEFAULT_DFLAGS "-O2"
    }

    # These are special options to use on testcase, and override DEFAULT_DFLAGS
    global PERMUTE_ARGS

    # Additional arguments for gdc_load
    global EXECUTE_ARGS

    # Initialize `dg'.
    dg-init

    # Main loop.

    # set verbose 1
    # set dg-final-code ""
    # Find all tests and pass to routine.
    foreach test [lsort [find $srcdir/$subdir *]] {
        regexp -- "(.*)/(.+)/(.+)\.(.+)$" $test match base dir name ext

        # Skip invalid test directory
        if {[lsearch "runnable compilable fail_compilation" $dir] == -1} {
            continue
        }

        # Skip invalid test extensions
        if {[lsearch "d" $ext] == -1} {
            continue
        }

        # Convert to DG test.
        set imports [file dirname $test]
        set imports [format "-I%s -I%s/imports" $imports $imports]
        set filename [dmd2dg $base $dir/$name.$ext]

        if {$dir == "runnable"} {
            append PERMUTE_ARGS " $SHARED_OPTION"
        }
        set options [gdc-permute-options $PERMUTE_ARGS]

        switch $dir {
            runnable {
                for { set i 0 } { $i<[llength $options] } { incr i } {
                    set TORTURE_OPTIONS [lindex $options $i]
                    set dg-do-what-default "run"
                    gdc-dg-runtest $filename $imports
                }
            }

            compilable {
                for { set i 0 } { $i<[llength $options] } { incr i } {
                    set TORTURE_OPTIONS [lindex $options $i]
                    set dg-do-what-default "assemble"
                    gdc-dg-runtest $filename "$imports"
                }
            }

            fail_compilation {
                for { set i 0 } { $i<[llength $options] } { incr i } {
                    set TORTURE_OPTIONS [lindex $options $i]
                    set dg-do-what-default "assemble"
                    #set dg-do-what-default "compile"
                    gdc-dg-runtest $filename $imports
                }
            }
        }

        # Cleanup
        #file delete $filename
    }

    # All done.
    dg-finish
}

gdc-do-test

