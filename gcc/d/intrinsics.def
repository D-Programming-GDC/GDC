/* intrinsics.def -- Definitions for D compiler intrinsics.
   Copyright (C) 2014-2017 Free Software Foundation, Inc.

GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3, or (at your option)
any later version.

GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GCC; see the file COPYING3.  If not see
<http://www.gnu.org/licenses/>.  */

/* DEF_D_INTRINSIC (CODE, ALIAS, NAME, MODULE, DECO)
   CODE	    The enum code used to refer this intrinsic.
   ALIAS    The enum code used to refer the function DECL_FUNCTION_CODE, if
	    there are multiple modules or decos for a single intrinsic, they
	    would all refer to this code.
   NAME	    The name of this intrinsic as a string.
   MODULE   The name of the module which the intrinsic belongs to as a string.
   DECO	    The function signature decoration of the intrinsic.

   Used for declaring internally recognized functions that either map to a
   GCC builtin, or are specially handled by the compiler.  */

/* core.bitop intrinsics.  */

DEF_D_INTRINSIC (BSF, BSF, "bsf", "core.bitop", "FNaNbNiNfkZi")
DEF_D_INTRINSIC (BSR, BSR, "bsr", "core.bitop", "FNaNbNiNfkZi")
DEF_D_INTRINSIC (BT, BT, "bt", "core.bitop", "FNaNbNixPkkZi")
DEF_D_INTRINSIC (BTC, BTC, "btc", "core.bitop", "FNaNbNiPkkZi")
DEF_D_INTRINSIC (BTR, BTR, "btr", "core.bitop", "FNaNbNiPkkZi")
DEF_D_INTRINSIC (BTS, BTS, "bts", "core.bitop", "FNaNbNiPkkZi")
DEF_D_INTRINSIC (BSF64, BSF, "bsf", "core.bitop", "FNaNbNiNfmZi")
DEF_D_INTRINSIC (BSR64, BSR, "bsr", "core.bitop", "FNaNbNiNfmZi")
DEF_D_INTRINSIC (BT64, BT, "bt", "core.bitop", "FNaNbNixPmmZi")
DEF_D_INTRINSIC (BTC64, BTC, "btc", "core.bitop", "FNaNbNiPmmZi")
DEF_D_INTRINSIC (BTR64, BTR, "btr", "core.bitop", "FNaNbNiPmmZi")
DEF_D_INTRINSIC (BTS64, BTS, "bts", "core.bitop", "FNaNbNiPmmZi")
DEF_D_INTRINSIC (BSWAP, BSWAP, "bswap", "core.bitop", "FNaNbNiNfkZk")
DEF_D_INTRINSIC (BSWAP64, BSWAP, "bswap", "core.bitop", "FNaNbNiNfmZm")
DEF_D_INTRINSIC (VLOAD, VLOAD, "volatileLoad", "core.bitop", "FNbNiNfPhZh")
DEF_D_INTRINSIC (VLOAD16, VLOAD, "volatileLoad", "core.bitop", "FNbNiNfPtZt")
DEF_D_INTRINSIC (VLOAD32, VLOAD, "volatileLoad", "core.bitop", "FNbNiNfPkZk")
DEF_D_INTRINSIC (VLOAD64, VLOAD, "volatileLoad", "core.bitop", "FNbNiNfPmZm")
DEF_D_INTRINSIC (VSTORE, VSTORE, "volatileStore", "core.bitop", "FNbNiNfPhhZv")
DEF_D_INTRINSIC (VSTORE16, VSTORE, "volatileStore", "core.bitop", "FNbNiNfPttZv")
DEF_D_INTRINSIC (VSTORE32, VSTORE, "volatileStore", "core.bitop", "FNbNiNfPkkZv")
DEF_D_INTRINSIC (VSTORE64, VSTORE, "volatileStore", "core.bitop", "FNbNiNfPmmZv")

/* core.checkedint intrinsics.  */

DEF_D_INTRINSIC (ADDS, ADDS, "adds", "core.checkedint", "FNaNbNiNfiiKbZi")
DEF_D_INTRINSIC (ADDSL, ADDS, "adds", "core.checkedint", "FNaNbNiNfllKbZl")
DEF_D_INTRINSIC (ADDU, ADDS, "addu", "core.checkedint", "FNaNbNiNfkkKbZk")
DEF_D_INTRINSIC (ADDUL, ADDS, "addu", "core.checkedint", "FNaNbNiNfmmKbZm")
DEF_D_INTRINSIC (SUBS, SUBS, "subs", "core.checkedint", "FNaNbNiNfiiKbZi")
DEF_D_INTRINSIC (SUBSL, SUBS, "subs", "core.checkedint", "FNaNbNiNfllKbZl")
DEF_D_INTRINSIC (SUBU, SUBS, "subu", "core.checkedint", "FNaNbNiNfkkKbZk")
DEF_D_INTRINSIC (SUBUL, SUBS, "subu", "core.checkedint", "FNaNbNiNfmmKbZm")
DEF_D_INTRINSIC (MULS, MULS, "muls", "core.checkedint", "FNaNbNiNfiiKbZi")
DEF_D_INTRINSIC (MULSL, MULS, "muls", "core.checkedint", "FNaNbNiNfllKbZl")
DEF_D_INTRINSIC (MULU, MULS, "mulu", "core.checkedint", "FNaNbNiNfkkKbZk")
DEF_D_INTRINSIC (MULUL, MULS, "mulu", "core.checkedint", "FNaNbNiNfmmKbZm")
DEF_D_INTRINSIC (NEGS, NEGS, "negs", "core.checkedint", "FNaNbNiNfiKbZi")
DEF_D_INTRINSIC (NEGSL, NEGS, "negs", "core.checkedint", "FNaNbNiNflKbZl")

/* core.math intrinsics.  */

DEF_D_INTRINSIC (COS, COS, "cos", "core.math", "FNaNbNiNfeZe")
DEF_D_INTRINSIC (FABS, FABS, "fabs", "core.math", "FNaNbNiNfeZe")
DEF_D_INTRINSIC (LDEXP, LDEXP, "ldexp", "core.math", "FNaNbNiNfeiZe")
DEF_D_INTRINSIC (RINT, RINT, "rint", "core.math", "FNaNbNiNfeZe")
DEF_D_INTRINSIC (RNDTOL, RNDTOL, "rndtol", "core.math", "FNaNbNiNfeZl")
DEF_D_INTRINSIC (SIN, SIN, "sin", "core.math", "FNaNbNiNfeZe")
DEF_D_INTRINSIC (SQRTF, SQRTF, "sqrt", "core.math", "FNaNbNiNffZf")
DEF_D_INTRINSIC (SQRT, SQRT, "sqrt", "core.math", "FNaNbNiNfdZd")
DEF_D_INTRINSIC (SQRTL, SQRTL, "sqrt", "core.math", "FNaNbNiNfeZe")

/* std.math intrinsics.  */

DEF_D_INTRINSIC (STD_COS, COS, "cos", "std.math", "FNaNbNiNfeZe")
DEF_D_INTRINSIC (STD_FABS, FABS, "fabs", "std.math", "FNaNbNiNfeZe")
DEF_D_INTRINSIC (STD_LDEXP, LDEXP, "ldexp", "std.math", "FNaNbNiNfeiZe")
DEF_D_INTRINSIC (STD_RINT, RINT, "rint", "std.math", "FNaNbNiNfeZe")
DEF_D_INTRINSIC (STD_RNDTOL, RNDTOL, "rndtol", "std.math", "FNaNbNiNfeZl")
DEF_D_INTRINSIC (STD_SIN, SIN, "sin", "std.math", "FNaNbNiNfeZe")
DEF_D_INTRINSIC (STD_SQRTF, SQRTF, "sqrt", "std.math", "FNaNbNiNffZf")
DEF_D_INTRINSIC (STD_SQRT, SQRT, "sqrt", "std.math", "FNaNbNiNfdZd")
DEF_D_INTRINSIC (STD_SQRTL, SQRTL, "sqrt", "std.math", "FNaNbNiNfeZe")

/* core.stdc.stdarg intrinsics.  */

DEF_D_INTRINSIC (VA_ARG, VA_ARG, "va_arg", "core.stdc.stdarg",
		 "FKI7va_listKI1TZv")
DEF_D_INTRINSIC (C_VA_ARG, C_VA_ARG, "va_arg", "core.stdc.stdarg",
		 "FKI7va_listZI1T")
DEF_D_INTRINSIC (VASTART, VASTART, "va_start", "core.stdc.stdarg",
		 "FJI7va_listKI1TZv")
